#!/bin/bash

# Script de Diagn√≥stico para Erro 401 "Authentication failed"
# Execute este script para identificar o problema de autentica√ß√£o

echo "=== DIAGN√ìSTICO DE AUTENTICA√á√ÉO - RECEIVE VEHICLE API ==="
echo ""

# Verificar se a API key foi fornecida
if [ -z "$1" ]; then
    echo "‚ùå ERRO: Forne√ßa a API key como par√¢metro"
    echo "Uso: $0 SUA_API_KEY_AQUI"
    echo ""
    echo "Exemplo: $0 abc123def456..."
    exit 1
fi

API_KEY="$1"
BASE_URL="https://eeidevcyxpnorbgcskdf.supabase.co/functions/v1/receive-vehicle"

echo "üîç API Key fornecida: ${API_KEY:0:8}...${API_KEY: -4}"
echo "üåê URL do endpoint: $BASE_URL"
echo ""

echo "=== TESTE 1: Diagn√≥stico Detalhado de Autentica√ß√£o ==="
echo "Executando: curl \"$BASE_URL?auth-debug=true\" -H \"x-api-key: $API_KEY\""
echo ""

RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$BASE_URL?auth-debug=true" \
    -H "x-api-key: $API_KEY" \
    -H "Content-Type: application/json")

HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')

echo "üìä Status HTTP: $HTTP_CODE"
echo "üìÑ Resposta:"
echo "$BODY" | jq '.' 2>/dev/null || echo "$BODY"
echo ""

if [ "$HTTP_CODE" = "200" ]; then
    echo "‚úÖ Diagn√≥stico executado com sucesso!"
    echo ""
    
    # Verificar se a autentica√ß√£o passou
    AUTH_SUCCESS=$(echo "$BODY" | jq -r '.authentication_result.keys_match_exact' 2>/dev/null)
    if [ "$AUTH_SUCCESS" = "true" ]; then
        echo "‚úÖ AUTENTICA√á√ÉO OK! Pode prosseguir com requisi√ß√µes normais."
        
        echo ""
        echo "=== TESTE 2: Requisi√ß√£o de Teste com Dados Reais ==="
        echo "Testando envio de dados..."
        
        TEST_DATA='[{"company_name":"Teste Diagn√≥stico","usage_type":"particular","vehicles":[{"vehicle":"Teste","brand":"Teste"}]}]'
        
        REAL_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -X POST "$BASE_URL" \
            -H "x-api-key: $API_KEY" \
            -H "Content-Type: application/json" \
            -d "$TEST_DATA")
        
        REAL_HTTP_CODE=$(echo "$REAL_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        REAL_BODY=$(echo "$REAL_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        echo "üìä Status HTTP: $REAL_HTTP_CODE"
        echo "üìÑ Resposta:"
        echo "$REAL_BODY" | jq '.' 2>/dev/null || echo "$REAL_BODY"
        
        if [ "$REAL_HTTP_CODE" = "201" ]; then
            echo ""
            echo "üéâ SUCESSO TOTAL! A API est√° funcionando corretamente."
        else
            echo ""
            echo "‚ö†Ô∏è Autentica√ß√£o OK, mas h√° problema com o formato dos dados."
        fi
    else
        echo "‚ùå PROBLEMA DE AUTENTICA√á√ÉO DETECTADO!"
        echo ""
        echo "üîß SOLU√á√ïES RECOMENDADAS:"
        echo "$BODY" | jq -r '.recommendations[]?' 2>/dev/null | sed 's/^/   - /'
    fi
else
    echo "‚ùå Falha no diagn√≥stico (HTTP $HTTP_CODE)"
    echo "Verifique se a URL est√° correta e se h√° conectividade com o servidor."
fi

echo ""
echo "=== TESTE 3: Diagn√≥stico de Configura√ß√£o ==="
echo "Verificando configura√ß√£o do servidor..."

CONFIG_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$BASE_URL?config-debug=true" \
    -H "x-api-key: $API_KEY")

CONFIG_HTTP_CODE=$(echo "$CONFIG_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
CONFIG_BODY=$(echo "$CONFIG_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')

echo "üìä Status HTTP: $CONFIG_HTTP_CODE"
echo "üìÑ Resposta:"
echo "$CONFIG_BODY" | jq '.' 2>/dev/null || echo "$CONFIG_BODY"

if [ "$CONFIG_HTTP_CODE" = "200" ]; then
    echo "‚úÖ Diagn√≥stico de configura√ß√£o executado com sucesso!"
    
    # Check for configuration issues
    CONFIG_ISSUES=$(echo "$CONFIG_BODY" | jq -r '.configuration_issues[]?' 2>/dev/null)
    if [ ! -z "$CONFIG_ISSUES" ]; then
        echo ""
        echo "‚ö†Ô∏è PROBLEMAS DE CONFIGURA√á√ÉO DETECTADOS:"
        echo "$CONFIG_BODY" | jq -r '.configuration_issues[]?' 2>/dev/null | sed 's/^/   - /'
        echo ""
        echo "üîß RECOMENDA√á√ïES:"
        echo "$CONFIG_BODY" | jq -r '.recommendations[]?' 2>/dev/null | sed 's/^/   - /'
    fi
else
    echo "‚ùå Falha no diagn√≥stico de configura√ß√£o (HTTP $CONFIG_HTTP_CODE)"
fi

echo ""
echo "=== TESTE 4: Conectividade B√°sica ==="
echo "Testando endpoint b√°sico..."

BASIC_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" "$BASE_URL?test=true" \
    -H "x-api-key: $API_KEY")

BASIC_HTTP_CODE=$(echo "$BASIC_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
BASIC_BODY=$(echo "$BASIC_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')

echo "üìä Status HTTP: $BASIC_HTTP_CODE"
if [ "$BASIC_HTTP_CODE" = "200" ]; then
    echo "‚úÖ Conectividade OK!"
else
    echo "‚ùå Problema de conectividade (HTTP $BASIC_HTTP_CODE)"
fi

echo ""
echo "=== RESUMO DO DIAGN√ìSTICO ==="
echo "Auth Debug: HTTP $HTTP_CODE"
echo "Config Debug: HTTP $CONFIG_HTTP_CODE"
echo "Basic Test: HTTP $BASIC_HTTP_CODE"
if [ ! -z "$REAL_HTTP_CODE" ]; then
    echo "Real Data: HTTP $REAL_HTTP_CODE"
fi

echo ""
echo "üìã Se o problema persistir, envie esta sa√≠da completa para o suporte t√©cnico."